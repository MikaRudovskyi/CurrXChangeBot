import logging
import time
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.storage import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import BOT_TOKEN
from db import create_pool, init_db, upsert_user, add_favorite, list_favorites, remove_favorite
from services import convert as api_convert

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)
pool = None

CURRENCIES = ["USD", "EUR", "UAH", "PLN", "GBP", "JPY", "CHF", "CAD", "AUD"]

class ConversionStates(StatesGroup):
    waiting_for_amount = State()

favorites_cache = {}
rate_cache = {}

CACHE_TTL = 60

async def safe_edit_message(message: types.Message, text: str, reply_markup=None, parse_mode=None):
    try:
        await message.edit_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        if "Message is not modified" in str(e):
            return

def make_keyboard(buttons, row_width=1, back_button=True):
    kb = InlineKeyboardMarkup(row_width=row_width)
    kb.add(*[InlineKeyboardButton(text, callback_data=data) for text, data in buttons])
    if back_button:
        kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))
    return kb

def get_main_menu_keyboard():
    return make_keyboard([
        ("–í–∏–±—Ä–∞—Ç–∏ –ø–µ—Ä—à—É –≤–∞–ª—é—Ç—É", "select_base"),
        ("–°–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö", "list_fav_menu")
    ], row_width=2, back_button=False)

def get_currency_keyboard(prefix: str):
    buttons = [(c, f"{prefix}_{c}") for c in CURRENCIES]
    return make_keyboard(buttons, row_width=3, back_button=True)

async def update_favorites_cache(user_id: int):
    rows = await list_favorites(pool, user_id)
    favorites_cache[user_id] = rows
    return rows

async def get_rate(base, target):
    key = (base, target)
    now = time.time()
    if key in rate_cache and now - rate_cache[key][1] < CACHE_TTL:
        return rate_cache[key][0]
    data = await api_convert(base, target, 1)
    rate_cache[key] = (data.get('rate'), now)
    return data.get('rate')

@dp.message_handler(commands=['start', 'menu'], state="*")
async def cmd_start_help_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await upsert_user(pool, message.from_user)
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤–∞–ª—é—Ç–Ω–∏–π –±–æ—Ç. –û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó üëá",
        reply_markup=get_main_menu_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == 'main_menu', state="*")
async def back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await safe_edit_message(callback_query.message, "–û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó üëá", reply_markup=get_main_menu_keyboard())
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'select_base', state="*")
async def select_base_currency(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(base=None, target=None)
    await safe_edit_message(callback_query.message, "–û–±–µ—Ä–∏ –ø–µ—Ä—à—É (–±–∞–∑–æ–≤—É) –≤–∞–ª—é—Ç—É:", reply_markup=get_currency_keyboard('base'))
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('base_'), state="*")
async def set_base_currency(callback_query: types.CallbackQuery, state: FSMContext):
    currency = callback_query.data.split('_')[1]
    await state.update_data(base=currency)
    await safe_edit_message(
        callback_query.message,
        f"–¢–∏ –æ–±—Ä–∞–≤ **{currency}**. –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ –¥—Ä—É–≥—É (—Ü—ñ–ª—å–æ–≤—É) –≤–∞–ª—é—Ç—É:",
        reply_markup=get_currency_keyboard('target'),
        parse_mode="Markdown"
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('target_'), state="*")
async def set_target_currency(callback_query: types.CallbackQuery, state: FSMContext):
    currency = callback_query.data.split('_')[1]
    await state.update_data(target=currency)
    data = await state.get_data()
    base_currency = data.get('base')
    if not base_currency:
        await callback_query.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à—É –≤–∞–ª—é—Ç—É.", show_alert=True)
        return
    await safe_edit_message(
        callback_query.message,
        f"–¢–∏ –æ–±—Ä–∞–≤ –ø–∞—Ä—É **{base_currency}** ‚Üí **{currency}**.\n\n–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å—É–º—É, —è–∫—É —Ö–æ—á–µ—à –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏:",
        parse_mode="Markdown"
    )
    await ConversionStates.waiting_for_amount.set()
    await callback_query.answer()

@dp.message_handler(state=ConversionStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
    except ValueError:
        await message.reply("–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É.")
        return
    user_data = await state.get_data()
    base = user_data.get('base')
    target = user_data.get('target')
    if not base or not target:
        await message.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ—á–Ω–∏ –∑–Ω–æ–≤—É.")
        await state.finish()
        return

    try:
        data = await api_convert(base, target, amount)
        result = data['result']
        rate = data.get('rate')
        msg = f"**{amount} {base}** = **{result:.4f} {target}**"
        if rate:
            msg += f"\n\n–ö—É—Ä—Å: 1 {base} = {rate:.6f} {target}"

        keyboard = make_keyboard([
            (f"–î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ", f"addfav_{base}_{target}")
        ], row_width=1, back_button=True)

        await message.reply(msg, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.exception("convert failed")
        await message.reply(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")
    finally:
        await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('addfav_'), state="*")
async def add_fav_from_callback(callback_query: types.CallbackQuery, state: FSMContext):
    _, base, target = callback_query.data.split('_')
    await upsert_user(pool, callback_query.from_user)
    await add_favorite(pool, callback_query.from_user.id, base, target)
    await update_favorites_cache(callback_query.from_user.id)
    await callback_query.answer(f"–ü–∞—Ä–∞ {base} ‚Üí {target} –¥–æ–¥–∞–Ω–∞ —É —Ñ–∞–≤–æ—Ä–∏—Ç–∏.", show_alert=True)
    await state.finish()
    await safe_edit_message(callback_query.message, f"–ü–∞—Ä–∞ **{base}** ‚Üí **{target}** –¥–æ–¥–∞–Ω–∞ –≤ —É–ª—é–±–ª–µ–Ω—ñ.", reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data == 'list_fav_menu', state="*")
async def list_fav_from_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await upsert_user(pool, callback_query.from_user)
    rows = favorites_cache.get(callback_query.from_user.id) or await update_favorites_cache(callback_query.from_user.id)

    if not rows:
        keyboard = make_keyboard([], row_width=1)
        await safe_edit_message(callback_query.message, "–£ —Ç–µ–±–µ –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö –ø–∞—Ä.", reply_markup=keyboard)
        await callback_query.answer()
        return

    buttons = [(f"{r['base']} ‚Üí {r['target']}", f"showfav_{r['id']}") for r in rows]
    keyboard = make_keyboard(buttons, row_width=1)
    await safe_edit_message(callback_query.message, "–¢–≤–æ—ó —É–ª—é–±–ª–µ–Ω—ñ –ø–∞—Ä–∏:", reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('showfav_'), state="*")
async def show_fav_from_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    fav_id = int(callback_query.data.split('_')[1])
    rows = favorites_cache.get(callback_query.from_user.id) or await update_favorites_cache(callback_query.from_user.id)
    fav = next((r for r in rows if r['id'] == fav_id), None)
    if not fav:
        await callback_query.answer("–í–∏–±—Ä–∞–Ω–∞ —É–ª—é–±–ª–µ–Ω–∞ –ø–∞—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    base = fav['base']
    target = fav['target']
    try:
        rate = await get_rate(base, target)
        msg = f"–ö—É—Ä—Å –¥–ª—è —É–ª—é–±–ª–µ–Ω–æ—ó –ø–∞—Ä–∏:\n1 **{base}** = **{rate:.6f} {target}**"
        buttons = [
            ("–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏", f"convert_from_fav_{base}_{target}"),
            ("–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö", f"delfav_{fav_id}")
        ]
        keyboard = make_keyboard(buttons, row_width=1)
        await safe_edit_message(callback_query.message, msg, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.exception("convert failed")
        await bot.send_message(callback_query.message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('convert_from_fav_'), state="*")
async def convert_from_fav(callback_query: types.CallbackQuery, state: FSMContext):
    _, _, _, base, target = callback_query.data.split('_')
    await state.update_data(base=base, target=target)
    await safe_edit_message(callback_query.message, f"–¢–∏ –æ–±—Ä–∞–≤ –ø–∞—Ä—É **{base}** ‚Üí **{target}**.\n\n–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å—É–º—É, —è–∫—É —Ö–æ—á–µ—à –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏:", parse_mode="Markdown")
    await ConversionStates.waiting_for_amount.set()
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('delfav_'), state="*")
async def delete_fav_from_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    fav_id = int(callback_query.data.split('_')[1])
    res = await remove_favorite(pool, callback_query.from_user.id, fav_id)
    await update_favorites_cache(callback_query.from_user.id)
    if res == "DELETE 1":
        await callback_query.answer("–§–∞–≤–æ—Ä–∏—Ç –≤–∏–¥–∞–ª–µ–Ω–æ.", show_alert=True)
        await list_fav_from_menu(callback_query, state)
    else:
        await callback_query.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–≤–æ—Ä–∏—Ç–∞ –∑ —Ç–∞–∫–∏–º id.", show_alert=True)

async def on_startup(dp):
    global pool
    logger.info("Creating DB pool...")
    pool = await create_pool()
    logger.info("Init DB (create tables if needed)...")
    await init_db(pool)
    logger.info("Bot started")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)